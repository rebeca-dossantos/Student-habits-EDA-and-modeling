# -*- coding: utf-8 -*-
"""pisi3_habits.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16VXVhTvKnPM1BlD1k26lbGNwhOm0lQ3x
"""

from google.colab import files
files.upload()  # selecione o kaggle.json

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d jayaantanaath/student-habits-vs-academic-performance
!unzip student-habits-vs-academic-performance.zip

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# ajuste para gráficos bonitos
sns.set(style="whitegrid")

# carregar o csv
df = pd.read_csv("student_habits_performance.csv")  # ajuste para o nome correto

df.head()

df['parental_education_level'] = df['parental_education_level'].fillna(df['parental_education_level'].mode()[0])
df.isnull().sum()

categoricas = df.select_dtypes(include='object').columns
for coluna in categoricas:
    print(coluna)

df=df.rename(columns={
    'student_id': 'id_aluno',
    'age': 'idade',
    'gender': 'genero',
    'study_hours_per_day': 'horas_estudo_por_dia',
    'social_media_hours': 'horas_redes_sociais',
    'netflix_hours': 'horas_netflix',
    'part_time_job':'trabalho_meio_periodo',
    'attendance_frequency': 'frequencia_aulas',
    'sleep_hours': 'horas_sono',
    'diet_quality':'qualidade_dieta',
    'exercise_frequency': 'frequencia_exercicios_fisicos',
    'parental_education_level': 'nivel_educacao_parental',
    'internet_quality':'qualidade_internet',
    'mental_health_rating':'avaliacao_saude_mental',
    'extracurricular_participation': 'atividades_extracurriculares',
    'exam_score': 'nota_exame'

})

# Mapeamento de categorias para português
df['genero'] = df['genero'].replace({
    'Male': 'Maculino',
    'Female': 'Feminino',
    'Other': 'Outro'
})

df['trabalho_meio_periodo'] = df['trabalho_meio_periodo'].replace({
    'Yes': 'Sim',
    'No': 'Não'
})

df['qualidade_dieta'] = df['qualidade_dieta'].replace({
    'Good': 'Boa',
    'Poor': 'Ruim',
    'Fair':'Regular'
})
df['nivel_educacao_parental'] = df['nivel_educacao_parental'].replace({
    'High School': 'Ensino Médio',
    'Bachelor': 'Bacharelado',
    'Master':'Mestrado',
})
df['qualidade_internet'] = df['qualidade_internet'].replace({
    'Good': 'Boa',
    'Poor': 'Ruim',
    'Average':'Mediana'
})

df['atividades_extracurriculares'] = df['atividades_extracurriculares'].replace({
    'Yes': 'Sim',
    'No': 'Não'
})


df.head()

# prompt: graficos de subplot de todas as variaveis, menos student_id

df_no_id = df.drop('id_aluno', axis=1)

n_cols = 3
n_rows = (len(df_no_id.columns) + n_cols - 1) // n_cols

fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 5 * n_rows))
axes = axes.flatten()

for i, col in enumerate(df_no_id.columns):
    if df_no_id[col].dtype in ['int64', 'float64']:
        sns.histplot(data=df_no_id, x=col, ax=axes[i], kde=True)
        axes[i].set_title(f'Distribuição de {col}')
    else:
        sns.countplot(data=df_no_id, x=col, ax=axes[i])
        axes[i].set_title(f'Contagem de {col}')
        axes[i].tick_params(axis='x', rotation=45)

# Remover subplots vazios
for j in range(i + 1, len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

# prompt: grafico de correlação das variaveis

# Selecionar apenas as colunas numéricas para o cálculo da correlação
df_numeric = df.select_dtypes(include=np.number)

# Calcular a matriz de correlação
correlation_matrix = df_numeric.corr()

# Criar o heatmap da matriz de correlação
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Matriz de Correlação das Variáveis Numéricas')
plt.show()